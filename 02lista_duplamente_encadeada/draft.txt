classes:
    DoublyLinkedList
    Cursor
    Node

DoublyLinkedList {
private:
    Cursor cursor
    Node *head
    Node *tail
public:
    Node *acessarAtual(void)
    void InserirAntesDoAtual(Node *new)
    void InserirApósAtualint(Node *new)
    void inserirNoFimint(Node *new)
    void inserirNaFrenteint(Node *new)
    void inserirNaPosicao(int k, Node *new)
    void ExcluirAtual(void)
    void ExcluirPrim(void)
    void ExcluirUlt(void)
    void ExcluirElem(long key)
    void ExcluirDaPos(int k)
    bool Buscar(long key)
    bool Vazia(void)
    bool Cheia(void)
    int posiçãoDe(long key)
}

Cursor {
private:
    Node *current;
public:
    void avançarKPosições(int K)
    void retrocederKPosições (int K)
    void irParaPrimeiro(void)
    void irParaUltimo(void)
}

Node {
private:
    Node *next
    Node *prev
    long key ->             always unique (gerar UUID)
    std::string value ->    arbitrary
public:
    // getters e setters
}

